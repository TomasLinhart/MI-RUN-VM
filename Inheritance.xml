<?xml version="1.0" encoding="utf-8" ?>
<classes>
	<class name="A" parentName="Any">
		<fields>
			<field name="A" type="Integer" />
		</fields>
		<methods>
			<method name="New" type="A">
				<args>
				</args>
				<locals>
				</locals>
				<instructions>
					<instruction>return</instruction> <!-- Added by compiler -->
				</instructions>
			</method>
			<method name="Test" type="String">
				<args>
				</args>
				<locals>
					<local name="$__tmp" type="Any" />
				</locals>
				<instructions>
					<instruction>newstring #A</instruction> <!-- Line: 7 return "A" -->
					<instruction>vreturn</instruction> <!-- Line: 7 return "A" -->
				</instructions>
			</method>
			<method name="Test" type="String">
				<args>
					<arg name="a" type="Integer" />
					<arg name="b" type="A" />
				</args>
				<locals>
					<local name="$__tmp" type="Any" />
				</locals>
				<instructions>
					<instruction>newstring #with A</instruction> <!-- Line: 11 return "with A" -->
					<instruction>vreturn</instruction> <!-- Line: 11 return "with A" -->
				</instructions>
			</method>
		</methods>
	</class>
	<class name="B" parentName="A">
		<fields>
			<field name="A" type="Integer" />
			<field name="B" type="Integer" />
		</fields>
		<methods>
			<method name="New" type="B">
				<args>
				</args>
				<locals>
				</locals>
				<instructions>
					<instruction>return</instruction> <!-- Added by compiler -->
				</instructions>
			</method>
			<method name="Test" type="String">
				<args>
				</args>
				<locals>
					<local name="$__tmp" type="Any" />
				</locals>
				<instructions>
					<instruction>newstring #B</instruction> <!-- Line: 19 return "B" -->
					<instruction>vreturn</instruction> <!-- Line: 19 return "B" -->
				</instructions>
			</method>
			<method name="MyTest" type="String">
				<args>
				</args>
				<locals>
					<local name="$__tmp" type="Any" />
				</locals>
				<instructions>
					<instruction>vload 0</instruction> <!-- Line: 23 return parent::Test() - loading self -->
					<instruction>invokevirtual A::Test::0</instruction> <!-- Line: 23 return parent::Test() - doing method call -->
					<instruction>vreturn</instruction> <!-- Line: 23 return parent::Test() -->
				</instructions>
			</method>
			<method name="SecondTest" type="String">
				<args>
				</args>
				<locals>
					<local name="$__tmp" type="Any" />
				</locals>
				<instructions>
					<instruction>vload 0</instruction> <!-- Line: 27 return A::Test() - loading self -->
					<instruction>invokevirtual A::Test::0</instruction> <!-- Line: 27 return A::Test() - doing method call -->
					<instruction>vreturn</instruction> <!-- Line: 27 return A::Test() -->
				</instructions>
			</method>
			<method name="Test" type="String">
				<args>
					<arg name="a" type="Integer" />
					<arg name="b" type="B" />
				</args>
				<locals>
					<local name="$__tmp" type="Any" />
				</locals>
				<instructions>
					<instruction>newstring #with B</instruction> <!-- Line: 31 return "with B" -->
					<instruction>vreturn</instruction> <!-- Line: 31 return "with B" -->
				</instructions>
			</method>
		</methods>
	</class>
	<class name="C" parentName="B">
		<fields>
			<field name="A" type="Integer" />
			<field name="B" type="Integer" />
			<field name="C" type="Integer" />
		</fields>
		<methods>
			<method name="New" type="C">
				<args>
				</args>
				<locals>
				</locals>
				<instructions>
					<instruction>return</instruction> <!-- Added by compiler -->
				</instructions>
			</method>
		</methods>
	</class>
	<class name="X" parentName="Any">
		<fields>
		</fields>
		<methods>
			<method name="New" type="X">
				<args>
				</args>
				<locals>
				</locals>
				<instructions>
					<instruction>return</instruction> <!-- Added by compiler -->
				</instructions>
			</method>
			<method name="Test" type="String">
				<args>
				</args>
				<locals>
					<local name="$__tmp" type="Any" />
				</locals>
				<instructions>
					<instruction>newstring #X</instruction> <!-- Line: 43 return "X" -->
					<instruction>vreturn</instruction> <!-- Line: 43 return "X" -->
				</instructions>
			</method>
			<method name="Test2" type="String">
				<args>
				</args>
				<locals>
					<local name="$__tmp" type="Any" />
				</locals>
				<instructions>
					<instruction>newstring #X</instruction> <!-- Line: 47 return "X" -->
					<instruction>vreturn</instruction> <!-- Line: 47 return "X" -->
				</instructions>
			</method>
		</methods>
	</class>
	<class name="Y" parentName="X">
		<fields>
		</fields>
		<methods>
			<method name="New" type="Y">
				<args>
				</args>
				<locals>
				</locals>
				<instructions>
					<instruction>return</instruction> <!-- Added by compiler -->
				</instructions>
			</method>
			<method name="Test" type="String">
				<args>
				</args>
				<locals>
					<local name="$__tmp" type="Any" />
				</locals>
				<instructions>
					<instruction>vload 0</instruction> <!-- Line: 55 return parent::Test() - loading self -->
					<instruction>invokevirtual X::Test::0</instruction> <!-- Line: 55 return parent::Test() - doing method call -->
					<instruction>vreturn</instruction> <!-- Line: 55 return parent::Test() -->
				</instructions>
			</method>
			<method name="Test2" type="String">
				<args>
				</args>
				<locals>
					<local name="$__tmp" type="Any" />
				</locals>
				<instructions>
					<instruction>vload 0</instruction> <!-- Line: 59 return parent::Test() - loading self -->
					<instruction>invokevirtual X::Test::0</instruction> <!-- Line: 59 return parent::Test() - doing method call -->
					<instruction>vreturn</instruction> <!-- Line: 59 return parent::Test() -->
				</instructions>
			</method>
		</methods>
	</class>
	<class name="Z" parentName="Y">
		<fields>
		</fields>
		<methods>
			<method name="New" type="Z">
				<args>
				</args>
				<locals>
				</locals>
				<instructions>
					<instruction>return</instruction> <!-- Added by compiler -->
				</instructions>
			</method>
			<method name="Test2" type="String">
				<args>
				</args>
				<locals>
					<local name="$__tmp" type="Any" />
				</locals>
				<instructions>
					<instruction>vload 0</instruction> <!-- Line: 67 return parent::Test() - loading self -->
					<instruction>invokevirtual Y::Test::0</instruction> <!-- Line: 67 return parent::Test() - doing method call -->
					<instruction>vreturn</instruction> <!-- Line: 67 return parent::Test() -->
				</instructions>
			</method>
		</methods>
	</class>
	<class name="EntryPoint" parentName="Any">
		<fields>
		</fields>
		<methods>
			<method name="New" type="EntryPoint">
				<args>
				</args>
				<locals>
				</locals>
				<instructions>
					<instruction>return</instruction> <!-- Added by compiler -->
				</instructions>
			</method>
			<method name="Entry" type="Unit">
				<args>
					<arg name="args" type="Array" />
				</args>
				<locals>
					<local name="b" type="B" />
					<local name="a" type="A" />
					<local name="c" type="C" />
					<local name="z" type="Z" />
					<local name="$__tmp" type="Any" />
				</locals>
				<instructions>
					<instruction>new B</instruction> <!-- Line: 75 let b : B = B#New() - creating new instance -->
					<instruction>vstore 6</instruction> <!-- Line: 75 let b : B = B#New() - storing in tmp variable -->
					<instruction>vload 6</instruction> <!-- Line: 75 let b : B = B#New() - loading from tmp variable -->
					<instruction>invokevirtual ::New::0</instruction> <!-- Line: 75 let b : B = B#New() - doing method call -->
					<instruction>vload 6</instruction> <!-- Line: 75 let b : B = B#New() - loading from tmp variable -->
					<instruction>vstore 2</instruction> <!-- Line: 75 let b : B = B#New() -->
					<instruction>vload 2</instruction> <!-- Line: 76 b#Test() -->
					<instruction>invokevirtual ::Test::0</instruction> <!-- Line: 76 b#Test() - doing method call -->
					<instruction>syscall 1</instruction> <!-- Line: 77 emit "syscall 1" // print  string -->
					<instruction>vload 2</instruction> <!-- Line: 78 b#MyTest() -->
					<instruction>invokevirtual ::MyTest::0</instruction> <!-- Line: 78 b#MyTest() - doing method call -->
					<instruction>syscall 1</instruction> <!-- Line: 79 emit "syscall 1" // print  string -->
					<instruction>vload 2</instruction> <!-- Line: 80 b#SecondTest() -->
					<instruction>invokevirtual ::SecondTest::0</instruction> <!-- Line: 80 b#SecondTest() - doing method call -->
					<instruction>syscall 1</instruction> <!-- Line: 81 emit "syscall 1" // print  string -->
					<instruction>new A</instruction> <!-- Line: 82 let a : A = A#New() - creating new instance -->
					<instruction>vstore 6</instruction> <!-- Line: 82 let a : A = A#New() - storing in tmp variable -->
					<instruction>vload 6</instruction> <!-- Line: 82 let a : A = A#New() - loading from tmp variable -->
					<instruction>invokevirtual ::New::0</instruction> <!-- Line: 82 let a : A = A#New() - doing method call -->
					<instruction>vload 6</instruction> <!-- Line: 82 let a : A = A#New() - loading from tmp variable -->
					<instruction>vstore 3</instruction> <!-- Line: 82 let a : A = A#New() -->
					<instruction>vload 2</instruction> <!-- Line: 83 a = b -->
					<instruction>vstore 3</instruction> <!-- Line: 83 a = b - assigning variable -->
					<instruction>vload 3</instruction> <!-- Line: 84 a#Test() -->
					<instruction>invokevirtual ::Test::0</instruction> <!-- Line: 84 a#Test() - doing method call -->
					<instruction>syscall 1</instruction> <!-- Line: 85 emit "syscall 1" // print  string -->
					<instruction>new A</instruction> <!-- Line: 86 a = A#New() - creating new instance -->
					<instruction>vstore 6</instruction> <!-- Line: 86 a = A#New() - storing in tmp variable -->
					<instruction>vload 6</instruction> <!-- Line: 86 a = A#New() - loading from tmp variable -->
					<instruction>invokevirtual ::New::0</instruction> <!-- Line: 86 a = A#New() - doing method call -->
					<instruction>vload 6</instruction> <!-- Line: 86 a = A#New() - loading from tmp variable -->
					<instruction>vstore 3</instruction> <!-- Line: 86 a = A#New() - assigning variable -->
					<instruction>new C</instruction> <!-- Line: 87 let c : C = C#New() - creating new instance -->
					<instruction>vstore 6</instruction> <!-- Line: 87 let c : C = C#New() - storing in tmp variable -->
					<instruction>vload 6</instruction> <!-- Line: 87 let c : C = C#New() - loading from tmp variable -->
					<instruction>invokevirtual ::New::0</instruction> <!-- Line: 87 let c : C = C#New() - doing method call -->
					<instruction>vload 6</instruction> <!-- Line: 87 let c : C = C#New() - loading from tmp variable -->
					<instruction>vstore 4</instruction> <!-- Line: 87 let c : C = C#New() -->
					<instruction>ipush 1</instruction> <!-- Line: 88 c#Test(1, a) -->
					<instruction>vload 3</instruction> <!-- Line: 88 c#Test(1, a) -->
					<instruction>vload 4</instruction> <!-- Line: 88 c#Test(1, a) -->
					<instruction>invokevirtual ::Test::2</instruction> <!-- Line: 88 c#Test(1, a) - doing method call -->
					<instruction>syscall 1</instruction> <!-- Line: 89 emit "syscall 1" // print  string -->
					<instruction>ipush 1</instruction> <!-- Line: 90 c#Test(1, b) -->
					<instruction>vload 2</instruction> <!-- Line: 90 c#Test(1, b) -->
					<instruction>vload 4</instruction> <!-- Line: 90 c#Test(1, b) -->
					<instruction>invokevirtual ::Test::2</instruction> <!-- Line: 90 c#Test(1, b) - doing method call -->
					<instruction>syscall 1</instruction> <!-- Line: 91 emit "syscall 1" // print  string -->
					<instruction>new Z</instruction> <!-- Line: 92 let z : Z = Z#New() - creating new instance -->
					<instruction>vstore 6</instruction> <!-- Line: 92 let z : Z = Z#New() - storing in tmp variable -->
					<instruction>vload 6</instruction> <!-- Line: 92 let z : Z = Z#New() - loading from tmp variable -->
					<instruction>invokevirtual ::New::0</instruction> <!-- Line: 92 let z : Z = Z#New() - doing method call -->
					<instruction>vload 6</instruction> <!-- Line: 92 let z : Z = Z#New() - loading from tmp variable -->
					<instruction>vstore 5</instruction> <!-- Line: 92 let z : Z = Z#New() -->
					<instruction>vload 5</instruction> <!-- Line: 93 z#Test() -->
					<instruction>invokevirtual ::Test::0</instruction> <!-- Line: 93 z#Test() - doing method call -->
					<instruction>syscall 1</instruction> <!-- Line: 94 emit "syscall 1" // print  string -->
					<instruction>vload 5</instruction> <!-- Line: 95 z#Test2() -->
					<instruction>invokevirtual ::Test2::0</instruction> <!-- Line: 95 z#Test2() - doing method call -->
					<instruction>syscall 1</instruction> <!-- Line: 96 emit "syscall 1" // print  string -->
					<instruction>return</instruction> <!-- Added by compiler -->
				</instructions>
			</method>
		</methods>
	</class>
</classes>